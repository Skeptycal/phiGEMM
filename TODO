# Copyright (C) 2011-2013 Quantum ESPRESSO Foundation
# Copyright (C) 2010-2011 Irish Centre for High-End Computing (ICHEC)


# Tasks to complete before release 2.0.0rc2 (expected November 8th, 2012) #
- assessment SPECIAL-K heuristic (heuristics can change between different 
  GPU arch and OpenMP thread used)
- test, change, modify, correct OR drop __PHIGEMM_MULTI_STREAMS
- extensive test of multi-GPU GEMMs
- add MASK feature: specify if A or B are already and if C has to be all on GPU or CPU
- add self-tune to DGEMM/CGEMM
- add special-k to CGEMM/SGEMM

# Tasks to complete before release 2.0.0rc3 (expected December 1th, 2012) #
- avoid streamCreate/streamDestroy for every special-k call
- test disabled section in bestFit() [phigemm_auxiliary.c]
- use NVCC as linked, not CC
- make MAGMABLAS working properly
- Doxygen documentation
- DAXPY single-threaded but OpenMP in the outer loop (see 

# Tasks to complete before release 2.0.0 (expected December 15th, 2012) #
- (short) LaTeX manual: installation, integration, benchmarking
- benchmark comparisons between GF and GK architectures


Last update: November, 2012

0) Reproducible bugs/problems:
  0.0 serial test-case does not compile using CUDA-5.0
      ( /opt/cuda-5.0/src/fortran_common.h:405:2: error: #error unsupported Fortran compiler )
  0.1 Problem detecting latest MKL multi-threaded library
      ( icc version 13.0.1 (gcc version 4.4.3 compatibility) )
      
1) Organization:

2) Documentation:
  2.0 Write a user guide (compiling & linking)
  2.1 Add doxygen 
  
4) Development:
  4.0  Major highly desirable restructuring:
    4.0.1 Change memory model: internally a pointer always knows by reading an external 
          variable how much memory is free per GPU
    4.0.2 Padding the leading dimensions
    4.0.3 Benchmarking which padding is the best (32 like MAGMA?)
    4.0.4 Link to non-MKL/non-ACML multi-threaded BLAS libraries (using dlopen?)
    4.0.5 Use C++ templates 
        
  4.1 New developments to be added (sooner or later):
    4.1.1 Developer a "tuner" program to detect and define 
    4.1.2 Introduce DGEMV where one or two critical GEMMs dimensions are < 5
    4.1.3 
    
  4.2 New developments, desirable or to be added:
    4.2.1 phigemm.profile.{xml,json} (same as csv but in XML or json)
    4.2.1 Script that easily process the output of the test-suites 
          and produce statistics (Python, input tuples from JSON file)
    4.2.2 Add a parallel test case (Cannon algorithm?)
    4.2.3 Special-K for multiple GPU
    
4.3 Performance enhancements:
    4.3.1 Auto-tune the split factor by benchmarking a predefined subset of 
          dimension ranges (ATLAS style -> make ; make test ; make)
    4.3.2 Figure out how to maintain past memories of previous GEMM across
          multiple executions (a off-line profile file?)
    
4.4 Cleanup:
    4.4.1 serial test-case has to be  
    
4.5 Trouble-makers, inconsistencies, etc: